// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  role          String  @default("user")
  cart          Cart?   
  address Address?
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  creditCard  CreditCard[]
  orders   Order[]
  buyItNow BuyItNow?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cart {
  id        Int       @id @default(autoincrement())
  user User     @relation(fields: [userId], references: [id])
  userId String @unique
  products  CartItem[]
}

model CartItem {
  cartId    Int
  productId Int
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  cart      Cart     @relation(fields: [cartId], references: [id])
  
  @@id([cartId, productId])
}

model BuyItNow {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  productId Int 
  quantity  Int      @default(1)
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model CartItemOrders {
  orderId    Int
  productId Int
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  order      Order     @relation(fields: [orderId], references: [id])
  
  @@id([orderId, productId])
}

model Product {
  id        Int       @id @default(autoincrement())
  name      String
  manufacturer String?
  price     Float
  image         String?
  description String?
  color String?
  categoryId Int
  size String?
  category  Category @relation(fields: [categoryId], references: [id])
  carts     CartItem[]
  buyItNow BuyItNow[]
  cartOrderds     CartItemOrders[]
  quantity Int
  onSale Boolean  @default(false)
  salePercent Int?
  createdAt     DateTime  @default(now())
  soldCount      Int          @default(0)
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
}

model Address {
  id  String    @id @default(uuid())
  user User?     @relation(fields: [userId], references: [id])
  userId String? @unique
  state String
  city String
  street String
  homeNumber Int
  apartmentNumber Int
  orders Order[]
}

model CreditCard {
  id        String  @id @default(uuid())
  cardNumber String @unique
  cvv       String
  last4Digits   String
  month   Int
  year Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Order {
  id Int       @id @default(autoincrement())
  user       User?            @relation(fields: [userId], references: [id])
  userId     String?
  address     Address?      @relation(fields: [addressId], references: [id])
  addressId   String?
  createdAt DateTime @default(now())
  status    String  @default("Shipping")
  products  CartItemOrders[]
  totalPrice Int
  paymentMethod String?
  guestName String?
}